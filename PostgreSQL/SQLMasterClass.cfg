; NGINX utilizes Perl Compatible Regular Expressions (PCRE).
; server_names_hash_bucket_size 64;  --> nginx.conf
; https://gigacourse.com/complete-nodejs-developer-in-2022-graphql-mongodb-more/
; Complete NodeJS Developer In 2023 --> { Search }
; https://gigacourse.com/5-react-nodejs-express-mongodb-the-mern-fullstack-guide/
; https://gigacourse.com/7-node-js-express-mongodb-more-the-complete-bootcamp-2019/
; Pedro Henrique Machado github
kill -s QUIT 1628
kill 9 1628
React Design Patterns and Best Practices on Udemy
Egghead.io React Tutorials
React.js Conf Videos

Object-Relational Mapping (ORM) --> {Sequelize and TypeORM} 

; What is the best way to approach DBMS especially PostgreSQL with a target to develop for PERN-based web apps and what is the bare minimum knowledge for someone to start developing a complex web app that is based on PostgreSQL?
To approach DBMS, especially PostgreSQL, with the goal of developing PERN-based web apps, there are several key steps you can take:

1. Learn SQL: PostgreSQL is a relational database management system (RDBMS) that uses Structured Query Language (SQL) to interact with the database. Therefore, it''s essential to have a good understanding of SQL to work with PostgreSQL effectively. There are many great resources available to learn SQL, such as online courses, tutorials, and books.

2. Learn PostgreSQL: Once you have a good grasp of SQL, you can start learning PostgreSQL specifically. PostgreSQL is a powerful and feature-rich database system, and there are many advanced concepts to master. The official documentation is an excellent resource for learning PostgreSQL, and there are many online courses and tutorials available as well.

3. Practice with sample data: To gain practical experience with PostgreSQL, it''s helpful to work with sample data sets. You can find many publicly available data sets online that you can load into your PostgreSQL database and use to practice writing queries and building applications.

4. Learn about ORM frameworks: Object-Relational Mapping (ORM) frameworks like Sequelize and TypeORM make it easier to work with PostgreSQL from within a Node.js application. They provide a higher-level abstraction that allows you to work with the database in an object-oriented way. Learning how to use an ORM framework can save you a lot of time and effort when developing complex web applications.

As for the bare minimum knowledge for developing a complex web app based on PostgreSQL, you should have a solid understanding of SQL and PostgreSQL, as well as proficiency in a server-side programming language like Node.js. You should also have experience building web applications using a modern front-end framework like React, and an understanding of RESTful API design principles. Finally, you should be familiar with security best practices for web applications, including user authentication and authorization.


; https://www.plesk.com/blog/various/nginx-configuration-guide/
server {
    location / {
        proxy_pass http://localhost:8080/;
    }

    location ~ \.(gif|jpg|png)$ {
        root /data/images;
    }
}

http {

include /etc/nginx/mime.types;

default_type application/octet-stream;

log_format main ''$remote_addr - $remote_user [$time_local] "$request" '

'$status $body_bytes_sent "$http_referer" '

''"$http_user_agent" "$http_x_forwarded_for"';

access_log /var/log/nginx/access.log main;

sendfile on;

#tcp_nopush on;

keepalive_timeout 65;

#gzip on;

include /etc/nginx/conf.d/*.conf;

}

listen [::]:80 default_server;
server_name example.com www.example.com;
try_files $uri /index.html;


; How would you approach developing an app like https://www.biblegateway.com/
To develop a Bible app like BibleGateway, there are several key components that you would need to consider. Here''s a high-level overview of how you could approach developing this type of app:

1. Bible Text: The first step would be to acquire the Bible text that you want to use in your app. There are several APIs and databases available that provide Bible text in various translations and languages. You would need to research and choose the appropriate source for your app''s needs.

2. Backend: You would need to develop a backend API to serve the Bible text to the frontend of the app. You could use a Node.js framework like Express to build this API, and use a database like PostgreSQL to store the Bible text. You would also need to develop endpoints for searching the Bible text, retrieving specific passages, and handling user account information.

3. Frontend: The frontend of the app would be responsible for displaying the Bible text to the user. You could use a frontend framework like React to build this portion of the app. You would need to develop components for displaying the text, searching for specific passages, selecting translations and languages, and managing user accounts.

4. User Management: You would need to develop a system for managing user accounts and preferences. This could include features like bookmarking passages, highlighting text, and setting preferences for translations and languages.

5. Design: The design of the app would be an important consideration to ensure that it is easy to use and visually appealing. You would need to develop a design that is responsive and works well on different devices, including desktop and mobile devices.

6. Testing: It is important to thoroughly test the app to ensure that it is functioning as expected. This would include testing the frontend and backend components separately, as well as performing integration testing to ensure that everything works together correctly.

7. Deployment: Once the app has been tested and is ready for release, you would need to deploy it to a production environment. This could involve deploying the backend API to a cloud provider like AWS or Azure, and deploying the frontend to a hosting provider like Netlify or Heroku.

Overall, developing a Bible app like BibleGateway would require a significant amount of effort and expertise in web development. It would be important to have a clear plan and understanding of the requirements before beginning development, as well as a team with the necessary skills to build and deploy the app.

# I want to build a Bible web application that is based on React for frontend, Node JS, express, and PostgreSQL as a backend or (PERN) stack as it may be termed. The App should allow the end user to select a bible version to use and also select a language. Could you please suggest the way to approach this project and explain, please?

Sure, building a Bible web application using the PERN stack is a great choice, and I can definitely help you with that. Here''s a general outline of how you could approach this project:

1. Plan out the features and functionalities you want in your application. This might include things like selecting a Bible version, selecting a language, searching for specific passages, bookmarking verses, etc.

2. Choose a Bible API that you want to use to get the text of the Bible. There are several free and paid Bible APIs available, such as ESV Bible API, BibleGateway API, etc. Make sure you read the API documentation and understand how to use it before you start building your application.

3. Set up your backend using Node.js, Express, and PostgreSQL. You can use a tool like Sequelize to help you connect to the database and interact with it. You''ll also need to create endpoints to handle user requests and responses, such as retrieving the Bible text and metadata, saving bookmarks, etc.

4. Set up your frontend using React. You''ll need to create components for each feature and functionality in your application, such as a dropdown for selecting a Bible version and language, a search bar for finding specific passages, etc.

5. Use Axios or another HTTP client to make requests to your backend API from your frontend components. You''ll need to pass in the selected Bible version and language to retrieve the correct text and metadata from the database.

6. Implement any additional features or functionalities you planned out in step 1, such as bookmarking verses or highlighting text.

7. Test your application thoroughly to make sure everything is working as expected.

8. Deploy your application to a hosting platform like Heroku or AWS so that it can be accessed by users.

I hope this helps you get started on your Bible web application project! Let me know if you have any other questions or need further clarification.

# I want to build a Bible Desktop Application using the (PERN) stack, PostgreSQL, Express, React, and NodeJS. The App should allow the end user to select a bible version to use and also select a language. Could you please suggest the way to approach this project and explain, please how to create a JavaScript-based Application for a Desktop Application?

Sure, I can definitely help you with that. Building a Bible desktop application using the PERN stack is a great choice, and here''s a general outline of how you could approach this project:

Plan out the features and functionalities you want in your application. This might include things like selecting a Bible version, selecting a language, searching for specific passages, bookmarking verses, etc.

Choose a Bible API that you want to use to get the text of the Bible. There are several free and paid Bible APIs available, such as ESV Bible API, BibleGateway API, etc. Make sure you read the API documentation and understand how to use it before you start building your application.

Set up your backend using Node.js, Express, and PostgreSQL. You can use a tool like Sequelize to help you connect to the database and interact with it. You''ll also need to create endpoints to handle user requests and responses, such as retrieving the Bible text and metadata, saving bookmarks, etc.

Set up your frontend using React. You''ll need to create components for each feature and functionality in your application, such as a dropdown for selecting a Bible version and language, a search bar for finding specific passages, etc.

Use ElectronJS to create a desktop application wrapper around your React application. ElectronJS is a framework that allows you to build desktop applications using web technologies like HTML, CSS, and JavaScript.

Use the ElectronJS API to create a menu bar, context menus, notifications, and other native features for your desktop application.

Use Node.js to communicate between the frontend React application and the backend server. You''ll need to use the IPC (Inter-Process Communication) module to send messages between the renderer process (React) and the main process (Node.js).

Implement any additional features or functionalities you planned out in step 1, such as bookmarking verses or highlighting text.

Test your application thoroughly to make sure everything is working as expected.

Package and distribute your desktop application to users. You can use a tool like Electron Forge to package your application for Windows, Mac, and Linux.

I hope this helps you get started on your Bible desktop application project! Let me know if you have any other questions or need further clarification.

# What are your suggestions on the code for creating a table that is going to be based on a bible app like that of https://www.biblegateway.com/ 

To create a table for a Bible app like BibleGateway, you would need to have a database that stores the Bible text and metadata. Here''s an example of how you could structure your database tables:

1. Version Table: This table would store information about the different Bible versions you want to support, such as the name, language, and abbreviation. Here''s an example schema for this table:

```
CREATE TABLE versions (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  language VARCHAR(255) NOT NULL,
  abbreviation VARCHAR(10) NOT NULL
);
```

2. Book Table: This table would store information about the different books in the Bible, such as the name, abbreviation, and number of chapters. Here''s an example schema for this table:

```
CREATE TABLE books (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  abbreviation VARCHAR(10) NOT NULL,
  chapters INTEGER NOT NULL
);
```

3. Chapter Table: This table would store information about the chapters in each book of the Bible, such as the book ID, chapter number, and number of verses. Here''s an example schema for this table:

```
CREATE TABLE chapters (
  id SERIAL PRIMARY KEY,
  book_id INTEGER REFERENCES books(id),
  chapter_number INTEGER NOT NULL,
  number_of_verses INTEGER NOT NULL
);
```

4. Verse Table: This table would store the actual text of each verse in the Bible, along with its book ID, chapter number, and verse number. Here''s an example schema for this table:

```
CREATE TABLE verses (
  id SERIAL PRIMARY KEY,
  book_id INTEGER REFERENCES books(id),
  chapter_number INTEGER NOT NULL,
  verse_number INTEGER NOT NULL,
  text TEXT NOT NULL
);
```

With these tables in place, you can easily query the database to retrieve Bible text and metadata based on the user''s selection of version and language. For example, to retrieve the text of John 3:16 in the English Standard Version (ESV), you could use a query like this:

```
SELECT verses.text FROM verses
JOIN chapters ON chapters.id = verses.chapter_id
JOIN books ON books.id = chapters.book_id
JOIN versions ON versions.id = books.version_id
WHERE books.abbreviation = 'JHN'
AND chapters.chapter_number = 3
AND verses.verse_number = 16
AND versions.abbreviation = 'ESV'
```

I hope this helps give you an idea of how you could structure your database tables for a Bible app! Let me know if you have any other questions.

# J:\Courses\[GigaCourse.Com] Udemy - SQL Masterclass SQL for Data Analytics\

select region, case when age>54 then 'Category 3'
               case when age<36 then 'Category 1'
               else 'Category 2' end as age_group
               ,count (*)
    from customer group y region, age_group
    order by region,count desc;  
; -----------------------------------------------------------------
select c.product_id,d.product_name, c.total_q_sold
from (select e.product_id,sum(e.quantity) as total_q_sold from (
    select a.*,b.region 
    from sales as a 
    left join customer as b 
    on a.customer_id=b.customer_id) as e where e.region = 'East' groubp by e.product_id) as c 
left join product as d 
on c.product_id=p.product_id
order by total_q_sold desc 
limit 5;
; ------------------------------------------------------------------
select c.product_id,d.product_name, c.total_q_sold
from (select e.product_id,sum(e.qunatity) as total_q_sold from (
    select a.*,b.region
    from sales as a 
    left join customer as b 
    on a.customer_id=b.customer_id) as e where e.region = 'South' group by e.product_id) as c 
left join product as d 
on c.product_id=d.product_id
order yb total_q_sold asc 
limit 5;
; ------------------------- /* Finance */------------------------------------------
select sum(discount*sales) as total_discount from sales;

select product_id, sum(discount*sales) as Discount, (sum(sales)-sum(discount*sales)) as Revenue, sum(discount*sales)/sum(sales)
Group by product_id
order by Ratio desc;
; ----------------------------------------------------------------------------------
CREATE DATABASE Training;

CREATE TABLE customer_table (
cust_id int, 
	first_name varchar,
	last_name varchar,
	age int,
	email_id varchar);

; Exercise 
CREATE DATABASE Classroom

CREATE TABLE science_class (
	enrollment_no int,
	name varchar,
	science_marks int
);
; ------------------------ INSERT INTO ---------------
INSERT INTO customer_table VALUES(1, 'bee', 'cee', 32, 'bc@xyz.com');

INSERT INTO customer_table (cust_id,first_name,age,email_id) VALUES
                           (2, 'dee', 22, 'd@xyz.com');

INSERT INTO customer_table VALUES 
    (3,'ee','ef',27,'ef@xyz.com'),
    (4,'gee','eh',35,'gh@xyz.com');


    (5,'eye','jay',62,'ij@xyz.com'),
    (6,'kay','el',,'el@xyz.com');

COPY tbl_name () FROM 'C:\\person.csv' DELIMITER ',' CSV HEADER;
COPY customer_table FROM 'C:\Users\walas\Desktop\Repos\Linux\PostgreSQL\copy.csv' DELIMITER ',' CSV HEADER;
COPY customer_table FROM 'C:\Users\walas\Desktop\Repos\Linux\PostgreSQL\copytext.txt' DELIMITER ',';
COPY customer_table FROM 'C:\Users\Public\copytext.txt' DELIMITER ',';

\copy (SELECT * FROM person LEFT JOIN car ON car.id = person.car_id) TO 'D:/STUDY/PostgreSQL/results.csv' DELIMITER ',' CSV HEADER;
\copy customer_table FROM  'C:\Users\walas\Desktop\Repos\Linux\PostgreSQL\copy.csv' DELIMITER ',' CSV HEADER;
\copy customer_table FROM  'C:\Users\walas\Desktop\Repos\Linux\PostgreSQL\copytext.txt' DELIMITER ',';

COPY tbl FROM '' ( FORMAT CSV, DELIMITER('|')); 
COPY tbl FROM '' CSV DELIMITER E'\t'; 

# Exercise 2
INSERT INTO science_class VALUES (1, 'Popeye', 33),
                                 (2, 'Olive', 54),
                                 (3, 'Brutus', 98);

SELECT DISTINCT first_name,age FROM customer_table;

AND|OR|NOT 

UPDATE  customer_table SET last_name = 'Pe', age = 17 WHERE Cust_id = 2;
DELETE FROM customer_table;

ALTER TABLE customer_table ADD test VARCHAR(255);
ALTER TABLE customer_table DROP test;
ALTER TABLE customer_table ALTER COLUMN age TYPE VARCHAR(255);

ALTER TABLE customer_table RENAME COLUMN email_id TO customer_email;
ALTER TABLE customer_table ALTER COLUMN cust_id SET NOT NULL;
ALTER TABLE customer_table ALTER COLUMN cust_id DROP NOT NULL;
ALTER TABLE customer_table ADD CONSTRAINT cust_id CHECK (cust_id>0);
ALTER TABLE customer_table ADD PRIMARY KEY (cust_id);
ALTER TABLE child_table ADD CONSTRAINT child_column FOREIGN KEY(parent_column) REFERENCES parent_table;

# Stopped @4:15

